name: no-nx-shas-test

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  simple-affected:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: "10.x"
      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: '24.x'
          cache: 'pnpm'
      - name: Install dependencies
        run: |
          pnpm install --frozen-lockfile --prefer-offline --prod=false --ignore-scripts || echo "Install failed, continuing..."
      - name: Test affected without nx-set-shas
        id: get-affected
        run: |
          echo "Testing affected projects without nx-set-shas..."
          
          # Test our script directly
          lint_result=$(node tools/dev-scripts/cmd-print-affected-array.js lint --all)
          test_result=$(node tools/dev-scripts/cmd-print-affected-array.js test --all)
          build_result=$(node tools/dev-scripts/cmd-print-affected-array.js build --all)
          
          echo "lint=$lint_result" >> $GITHUB_OUTPUT
          echo "test-unit=$test_result" >> $GITHUB_OUTPUT  
          echo "build=$build_result" >> $GITHUB_OUTPUT
          
          echo "Raw outputs:"
          echo "lint: $lint_result"
          echo "test-unit: $test_result"
          echo "build: $build_result"
          
          # Test condition logic
          if [[ "$lint_result" != '[]' && "$lint_result" != '' && "$lint_result" != 'null' && "$lint_result" == *'"'* ]]; then
            echo "lint_condition=true" >> $GITHUB_OUTPUT
          else
            echo "lint_condition=false" >> $GITHUB_OUTPUT
          fi
    outputs:
      lint: ${{ steps.get-affected.outputs.lint }}
      test-unit: ${{ steps.get-affected.outputs.test-unit }}
      build: ${{ steps.get-affected.outputs.build }}
      lint_condition: ${{ steps.get-affected.outputs.lint_condition }}

  test-conditions:
    runs-on: ubuntu-latest
    needs: [simple-affected]
    steps:
      - name: Show condition results
        run: |
          echo "Lint output: ${{ needs.simple-affected.outputs.lint }}"
          echo "Test output: ${{ needs.simple-affected.outputs.test-unit }}"
          echo "Build output: ${{ needs.simple-affected.outputs.build }}"
          echo "Lint condition: ${{ needs.simple-affected.outputs.lint_condition }}"
          
          # Test the GitHub expressions
          lint_not_empty_array="${{ needs.simple-affected.outputs.lint != '[]' }}"
          lint_not_empty_string="${{ needs.simple-affected.outputs.lint != '' }}"
          lint_not_null="${{ needs.simple-affected.outputs.lint != 'null' }}"
          lint_contains_quotes="${{ contains(needs.simple-affected.outputs.lint, '"') }}"
          
          echo "GitHub expression results:"
          echo "lint != '[]': $lint_not_empty_array"
          echo "lint != '': $lint_not_empty_string" 
          echo "lint != 'null': $lint_not_null"
          echo "contains quotes: $lint_contains_quotes"

  test-matrix-job:
    runs-on: ubuntu-latest
    needs: [simple-affected]
    if: ${{ needs.simple-affected.outputs.lint != '[]' && needs.simple-affected.outputs.lint != '' && needs.simple-affected.outputs.lint != 'null' && contains(needs.simple-affected.outputs.lint, '"') }}
    strategy:
      matrix:
        projectName: ${{fromJson(needs.simple-affected.outputs.lint)}}
    steps:
      - name: Matrix test
        run: |
          echo "Running for project: ${{ matrix.projectName }}"
          echo "This should run for each project in the lint array"