name: simplified-pre-build

on:
  push:
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: write
  actions: write
  pull-requests: read

jobs:
  get-affected:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: "10.x"
      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: '24.x'
          cache: 'pnpm'
      - name: Install dependencies
        run: |
          pnpm install --frozen-lockfile --prefer-offline --prod=false --ignore-scripts
          pnpm rebuild --store-path=~/.pnpm-store || echo "Rebuild failed, continuing..."
      - name: Get affected projects
        id: get-projects-arrays
        run: |
          echo "Getting affected projects..."
          lint_projects=$(node tools/dev-scripts/cmd-print-affected-array.js lint --all)
          test_projects=$(node tools/dev-scripts/cmd-print-affected-array.js test --all)
          build_projects=$(node tools/dev-scripts/cmd-print-affected-array.js build --all)
          
          echo "lint=$lint_projects" >> $GITHUB_OUTPUT
          echo "test-unit=$test_projects" >> $GITHUB_OUTPUT
          echo "build=$build_projects" >> $GITHUB_OUTPUT
          
          echo "Lint projects: $lint_projects"
          echo "Test projects: $test_projects"
          echo "Build projects: $build_projects"
    outputs:
      test-unit: ${{ steps.get-projects-arrays.outputs.test-unit }}
      lint: ${{ steps.get-projects-arrays.outputs.lint }}
      build: ${{ steps.get-projects-arrays.outputs.build }}

  lint:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [get-affected]
    if: ${{ needs.get-affected.outputs.lint != '[]' && needs.get-affected.outputs.lint != '' && needs.get-affected.outputs.lint != 'null' && contains(needs.get-affected.outputs.lint, '"') }}
    strategy:
      max-parallel: 4
      matrix:
        node: ["24.x"]
        projectName: ${{fromJson(needs.get-affected.outputs.lint)}}
    env:
      NODE: ${{ matrix.node }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: "10.x"
      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}
          cache: 'pnpm'
      - name: Install dependencies
        run: |
          pnpm install --frozen-lockfile --prefer-offline --ignore-scripts
          pnpm rebuild --store-path=~/.pnpm-store || echo "Rebuild failed, continuing..."
      - name: Lint
        run: pnpm nx run ${{ matrix.projectName }}:lint

  test-unit:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: [get-affected]
    if: ${{ needs.get-affected.outputs.test-unit != '[]' && needs.get-affected.outputs.test-unit != '' && needs.get-affected.outputs.test-unit != 'null' && contains(needs.get-affected.outputs.test-unit, '"') }}
    strategy:
      max-parallel: 4
      matrix:
        node: ["24.x"]
        projectName: ${{fromJson(needs.get-affected.outputs.test-unit)}}
    env:
      NODE: ${{ matrix.node }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: "10.x"
      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}
          cache: 'pnpm'
      - name: Install dependencies
        run: |
          pnpm install --frozen-lockfile --prefer-offline --ignore-scripts
          pnpm rebuild --store-path=~/.pnpm-store || echo "Rebuild failed, continuing..."
      - name: Test unit
        run: pnpm nx run ${{ matrix.projectName }}:test

  pre-build-finished:
    runs-on: ubuntu-latest
    needs: [test-unit, lint, get-affected]
    if: |
      always() &&
      (needs.get-affected.result == 'success') &&
      (needs.test-unit.result == 'success' || needs.test-unit.result == 'skipped') &&
      (needs.lint.result == 'success' || needs.lint.result == 'skipped')
    steps:
      - name: Trace
        run: echo "All jobs finished"